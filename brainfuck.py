### allowed file formats###
files = [('Brainfuck source file', '*.bf')]
defExt = ".bf"

command_c_equals = {

    ".": "            putchar(memory[memPointer]);\n",
    ",": "            memory[memPointer] = getchar();\n",
    "[": "\n      while(memory[memPointer] != 0)\n      {\n",
    "]": "}\n",
    "<": "            memPointer-=1;\n",
    ">": "            memPointer+=1;\n",
    "+": "            memory[memPointer]+=1;\n",
    "-": "            memory[memPointer]-=1;\n"

}

### convert string to BF output.
def convertStringToBF(target):
    result = ""
    
    for c in target:
        asciiValue = ord(c)
        result+="+"*asciiValue+".[-]"

    return result

### removes unsupported characters, blank lines, and formats it correctly.###
def cleanup(code):
    return ''.join(filter(lambda x: x in ['.', ',', '[', ']', '<', '>', '+', '-'], code))

### takes the raw brainfuck code, cleans it, and converts it into C code.
def generate_c_code(bf_code, memorySize):

    result = ""
    cleanedCode = cleanup(bf_code)

    ### add header text
    result+="""
/*
    C code generated by the BF Code, created by Polybagel
*/\n\n"""

    ### add stdio.h include
    result+="#include <stdio.h>\n\n"

    ### add int main()
    result+="int main () \n{\n"

    ### create memory buffer stack with a set amount of ram, the typical size is 30,000 cells.
    result+="      //create a memory buffer\n      int memory["+str(memorySize)+"];\nfor(int i = 0; i < "+str(memorySize)+"; i++){\nmemory[i]=0;\n}\n      int memPointer = 0;\n\n"


    ### replace brainfuck commands with C equivalants
    for command in cleanedCode:            
        result+=command_c_equals[command]

    ### add the final return 0 and '}' character
    result+="\ngetchar();\nreturn 0;\n}"

    #output_code(result,settingCcode,settingBatchfile)
    return result
